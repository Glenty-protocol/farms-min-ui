{"version":3,"sources":["utils/latinise.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/SearchInput.tsx","views/Farms/Farms.tsx","utils/bscscan.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","components/Select/Select.tsx"],"names":["Latinise","latin_map","τ","Τ","latinise","input","replace","x","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","backgroundColor","borderRadius","className","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","useEffect","timeoutId","setTimeout","clearTimeout","Container","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","Subtle","textSubtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","current","marginTop","marginBottom","expandAnimation","collapseAnimation","css","StakeContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ControlContainer","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","TABLE","viewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","margin","Select","options","option","marginLeft","sort","b","exact","renderContent","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","CardValue","lineHeight","prefix","window","innerWidth","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","boxShadow","DropDownList","ul","ListItem","li","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","offsetWidth","offsetHeight"],"mappings":"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","file":"static/js/9.ebebf98d.chunk.js","sourcesContent":["export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={94} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        style={{backgroundColor: 'rgb(218,165,32)',color:\"rgb(3, 14, 51)\",borderRadius:\"30px\"}}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton className='buttonaddmin' onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"#788cff\"  width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          className='buttonaddmin'\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon width=\"14px\" color=\"#788cff\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n     \r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          GLENTY\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')} \r\n        </Text>\r\n      </Flex>\r\n      {!account ?<UnlockButton mt=\"8px\" width=\"100%\" />: renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. GLENTY-BNB LP, LINK-BNB LP,\r\n  // NAR-GLENTY LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'GLENTY'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'GLENTY'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://info.glenty.com/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: white;\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n    display:none;\r\n\r\n    svg {\r\n      path {\r\n        fill: rgb(218,165,32);\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text, Image } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 60px;\r\n  height: 60px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 60px;\r\n    height: 60px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"rgb(218, 165, 32)\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`./images/farms/${image}.png`} alt=\"iconFarm\" width={64} height={64} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text color='white' bold className='farmname'>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: white;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"white\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: white;\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of GLENTY rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 GLENTY per block, a 40x farm would be getting 40 GLENTY per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"white\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text color='white'>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"white\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\n// TODO: Use `Text` instead\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: white;\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>GLENTY </Title>\r\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          style={{background:'#788cff',borderRadius:'30px'}}\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton,Flex,Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Flex justifyContent=\"space-between\" width='100%'><Text color='white' marginTop=\"8px\" fontSize='20px'>0</Text> <UnlockButton width=\"50%\" /></Flex>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\" className='buttonaddmin'>\r\n                <MinusIcon color=\"#788cff\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                className='buttonaddmin'\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"#788cff\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n        <Flex justifyContent=\"space-between\" width='100%'><Text color='white' marginTop=\"8px\" fontSize='20px'>0</Text> \r\n          <Button\r\n            width=\"50%\"\r\n            onClick={onPresentDeposit}\r\n            style={{backgroundColor: 'rgb(218,165,32)',color:\"rgb(3, 14, 51)\",borderRadius:\"30px\"}}\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n          </Flex>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n      <Flex justifyContent=\"space-between\" width='100%'><Text color='white' marginTop=\"8px\" fontSize='20px'>0</Text> \r\n        <Button width=\"50%\" disabled={requestedApproval} onClick={handleApprove} style={{backgroundColor: 'rgb(218,165,32)',color:\"rgb(3, 14, 51)\",borderRadius:\"30px\"}}>\r\n          {t('Enable')}\r\n        </Button>\r\n        </Flex>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 100;\r\n  color:rgb(218, 165, 32);\r\n  font-family:kanit !important;\r\n  font-size: 20px;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://info.glenty.com/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.glenty.com/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        {/* <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer> */}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text color='white'>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text color='white'>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text color='white'>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 10px;\r\n  color: white;\r\n  text-align: left;\r\n  font-family:kanit !important;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  color:white;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key} className='detailsFarm'>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key} className='aprFarm'>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key} className='earnedFarm'>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr className='detailsFarms'>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: #280D5F;\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" style={{background:'transparent',color:'white'}} onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"white\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useState, useMemo } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const { t } = useTranslation()\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder={t('Search Farms')}\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <div className='farmsTable'><Table data={rowData} columns={columns} userDataReady={userDataReady} /></div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { /* <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"white\" mb=\"24px\" style={{marginTop:'12%'}} textAlign=\"center\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" className='farmsSecond'color=\"rgb(218, 165, 32)\" textAlign=\"center\">\r\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader> */}\r\n      <Page className='farmsPage'>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n           {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\r\n            {/* <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text color='white'> {t('Staked only')}</Text>\r\n            </ToggleWrapper> */}\r\n            {/* <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} /> */ }\r\n          </ViewControls>\r\n          <FilterContainer className='farmFilter' style={{margin:'auto'}}>\r\n            <LabelWrapper>\r\n             {/* <Text textTransform=\"uppercase\">{t('Sort by')}</Text> */}\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              {/* <Text textTransform=\"uppercase\">{t('Search')}</Text> */}\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import { BASE_BSC_SCAN_URL } from 'config'\r\n\r\nexport const getBscScanAddressUrl = (address: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\r\n}\r\n\r\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\r\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\r\n}\r\n\r\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\r\n}\r\n\r\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\r\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string,\r\n  white?: boolean \r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'white',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={window.innerWidth>900? \"22pt\":\"12pt\"} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n"],"sourceRoot":""}